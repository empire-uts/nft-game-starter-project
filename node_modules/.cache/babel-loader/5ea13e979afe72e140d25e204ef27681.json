{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\Components\\\\Arena\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from '../LoadingIndicator';\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css'; // フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Arena = _ref => {\n  _s();\n\n  let {\n    characterNFT,\n    setCharacterNFT\n  } = _ref;\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null); // ページがロードされると下記が実行されます。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // ボスのメタデータを保存する状態変数を初期化します。\n\n  const [boss, setBoss] = useState(null); // 攻撃の状態を保存する変数を初期化します。\n\n  const [attackState, setAttackState] = useState(''); // 攻撃ダメージの表示形式を保存する変数を初期化します。\n\n  const [showToast, setShowToast] = useState(false);\n\n  const runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState('attacking');\n        console.log('Attacking boss...'); // NFT キャラクターがボスを攻撃します。\n\n        const attackTxn = await gameContract.attackBoss(); // トランザクションがマイニングされるまで待ちます。\n\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn); // attackState の状態を hit に設定します。\n\n        setAttackState('hit');\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  }; // ページがロードされると下記が実行されます。\n\n\n  useEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn); // ボスの状態を設定します。\n\n      setBoss(transformCharacterData(bossTxn));\n    }; // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      // ボスの新しいHPを取得します。\n      const bossHp = newBossHp.toNumber(); // NFT キャラクターの新しいHPを取得します。\n\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`); // NFT キャラクターとボスのHPを更新します。\n\n      setBoss(prevState => {\n        return { ...prevState,\n          hp: bossHp\n        };\n      });\n      setCharacterNFT(prevState => {\n        return { ...prevState,\n          hp: playerHp\n        };\n      });\n    }; // コントラクトが呼び出されていたら、下記を実行します。\n\n\n    if (gameContract) {\n      fetchBoss(); // リスナーの設定：ボスが攻撃された通知を受け取ります。\n\n      gameContract.on('AttackComplete', onAttackComplete);\n    } // コンポーネントがマウントされたら、リスナーを停止する。\n\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arena-container\",\n    children: [boss && characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"toast\",\n      className: showToast ? 'show' : '',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"desc\",\n        children: `💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), boss && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boss-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `boss-content  ${attackState}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDD25 \", boss.name, \" \\uD83D\\uDD25\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: boss.imageURI,\n            alt: `Boss ${boss.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"health-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n              value: boss.hp,\n              max: boss.maxHp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${boss.hp} / ${boss.maxHp} HP`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attack-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button\",\n          onClick: runAttackAction,\n          children: `💥 Attack ${boss.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this), attackState === 'attacking' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Attacking \\u2694\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), characterNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Character\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: characterNFT.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: characterNFT.imageURI,\n              alt: `Character ${characterNFT.name}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"health-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n                value: characterNFT.hp,\n                max: characterNFT.maxHp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${characterNFT.hp} / ${characterNFT.maxHp} HP`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: `⚔️ Attack Damage: ${characterNFT.attackDamage}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Arena, \"QQNKTReI4khRZOnamc9dua2DPdk=\");\n\n_c = Arena;\nexport default Arena;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arena\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js"],"names":["LoadingIndicator","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","Arena","characterNFT","setCharacterNFT","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackTxn","attackBoss","wait","error","fetchBoss","bossTxn","getBigBoss","onAttackComplete","newBossHp","newPlayerHp","bossHp","toNumber","playerHp","prevState","hp","on","off","name","attackDamage","imageURI","maxHp"],"mappings":"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","sourcesContent":["import LoadingIndicator from '../LoadingIndicator';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport './Arena.css';\r\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\r\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // コントラクトのデータを保有する状態変数を初期化します。\r\n  const [gameContract, setGameContract] = useState(null);\r\n  // ページがロードされると下記が実行されます。\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n  }, []);\r\n  // ボスのメタデータを保存する状態変数を初期化します。\r\n  const [boss, setBoss] = useState(null);\r\n  // 攻撃の状態を保存する変数を初期化します。\r\n  const [attackState, setAttackState] = useState('');\r\n  // 攻撃ダメージの表示形式を保存する変数を初期化します。\r\n  const [showToast, setShowToast] = useState(false);\r\n  const runAttackAction = async () => {\r\n    try {\r\n      // コントラクトが呼び出されたことを確認します。\r\n      if (gameContract) {\r\n        // attackState の状態を attacking に設定します。\r\n        setAttackState('attacking');\r\n        console.log('Attacking boss...');\r\n  \r\n        // NFT キャラクターがボスを攻撃します。\r\n        const attackTxn = await gameContract.attackBoss();\r\n  \r\n        // トランザクションがマイニングされるまで待ちます。\r\n        await attackTxn.wait();\r\n        console.log('attackTxn:', attackTxn);\r\n  \r\n        // attackState の状態を hit に設定します。\r\n        setAttackState('hit');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error attacking boss:', error);\r\n      setAttackState('');\r\n    }\r\n  };\r\n\r\n  // ページがロードされると下記が実行されます。\r\n    useEffect(() => {\r\n\t    // ボスのデータをコントラクトから読み込む関数を設定します。\r\n\t    const fetchBoss = async () => {\r\n\t\t    //ボスのメタデータをコントラクトをから呼び出します。\r\n\t\t    const bossTxn = await gameContract.getBigBoss();\r\n\t\t    console.log('Boss:', bossTxn);\r\n\t\t    // ボスの状態を設定します。\r\n\t\t    setBoss(transformCharacterData(bossTxn));\r\n\t    };\r\n\r\n\t    // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\r\n\t    const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n\t\t    // ボスの新しいHPを取得します。\r\n\t\t    const bossHp = newBossHp.toNumber();\r\n\t\t    // NFT キャラクターの新しいHPを取得します。\r\n\t\t    const playerHp = newPlayerHp.toNumber();\r\n\t\t    console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n\t\t    // NFT キャラクターとボスのHPを更新します。\r\n\t\t    setBoss((prevState) => {\r\n\t\t\t    return { ...prevState, hp: bossHp };\r\n\t\t    });\r\n\t\t    setCharacterNFT((prevState) => {\r\n\t\t\t    return { ...prevState, hp: playerHp };\r\n\t    \t});\r\n\t    };\r\n\r\n\t    // コントラクトが呼び出されていたら、下記を実行します。\r\n\t    if (gameContract) {\r\n\t\t    fetchBoss();\r\n\t\t    // リスナーの設定：ボスが攻撃された通知を受け取ります。\r\n\t\t    gameContract.on('AttackComplete', onAttackComplete);\r\n\t    }\r\n\r\n\t    // コンポーネントがマウントされたら、リスナーを停止する。\r\n\t    return () => {\r\n\t\t    if (gameContract) {\r\n\t\t\t    gameContract.off('AttackComplete', onAttackComplete);\r\n\t\t    }\r\n\t    }\r\n    }, [gameContract]);\r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n          {/* 攻撃ダメージの通知を追加します */}\r\n          {boss && characterNFT && (\r\n            <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n              <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n            </div>\r\n          )}\r\n          {/* ボスをレンダリングします */}\r\n          {boss && (\r\n            <div className=\"boss-container\">\r\n              <div className={`boss-content  ${attackState}`}>\r\n                <h2>🔥 {boss.name} 🔥</h2>\r\n                <div className=\"image-content\">\r\n                  <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n                  <div className=\"health-bar\">\r\n                    <progress value={boss.hp} max={boss.maxHp} />\r\n                    <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"attack-container\">\r\n                <button className=\"cta-button\" onClick={runAttackAction}>\r\n                  {`💥 Attack ${boss.name}`}\r\n                </button>\r\n              </div>\r\n              {/* Attack ボタンの下にローディングマークを追加します*/}\r\n              {attackState === 'attacking' && (\r\n                <div className=\"loading-indicator\">\r\n                  <LoadingIndicator />\r\n                  <p>Attacking ⚔️</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {/* NFT キャラクター をレンダリングします*/}\r\n          {characterNFT && (\r\n            <div className=\"players-container\">\r\n              <div className=\"player-container\">\r\n                <h2>Your Character</h2>\r\n                <div className=\"player\">\r\n                  <div className=\"image-content\">\r\n                    <h2>{characterNFT.name}</h2>\r\n                    <img\r\n                      src={characterNFT.imageURI}\r\n                      alt={`Character ${characterNFT.name}`}\r\n                    />\r\n                    <div className=\"health-bar\">\r\n                      <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                      <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"stats\">\r\n                    <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* <div className=\"active-players\">\r\n                <h2>Active Players</h2>\r\n                <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n              </div> */}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n};\r\nexport default Arena;"]},"metadata":{},"sourceType":"module"}