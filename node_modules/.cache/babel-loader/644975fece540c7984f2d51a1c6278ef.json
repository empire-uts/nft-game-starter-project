{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { CONTRACT_ADDRESS } from './constants';\nimport { ethers } from 'ethers';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // SelectCharacter に入っているファイルをインポートします。\n\nimport SelectCharacter from './Components/SelectCharacter'; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ユーザーがMetaMaskを持っているか確認します。\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pickachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      } // ウォレットアドレスに対してアクセスをリクエストしています。\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"VywkCGaQoua+w+7wryHxfoKz06M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["myEpicGame","CONTRACT_ADDRESS","ethers","React","useEffect","useState","SelectCharacter","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","renderContent","connectWalletAction","alert","twitterLogo"],"mappings":"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","sourcesContent":["import myEpicGame from './utils/MyEpicGame.json';\r\nimport { CONTRACT_ADDRESS } from './constants';\r\nimport { ethers } from 'ethers';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\n// SelectCharacter に入っているファイルをインポートします。\r\nimport SelectCharacter from './Components/SelectCharacter';\r\n\r\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\r\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n\r\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  // characterNFT と setCharacterNFT を初期化します。\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  \r\n  // ユーザーがMetaMaskを持っているか確認します。\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        console.log('Make sure you have MetaMask!');\r\n        return;\r\n      } else {\r\n        console.log('We have the ethereum object', ethereum);\r\n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\r\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n        // もしアカウントが一つでも存在したら、以下を実行。\r\n        if (accounts.length !== 0) {\r\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\r\n          const account = accounts[0];\r\n          console.log('Found an authorized account:', account);\r\n          // currentAccountにユーザーのアカウントアドレスを格納\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log('No authorized account found');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  // レンダリングメソッド\r\n  const renderContent = () => {\r\n    // シナリオ1.\r\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\r\n    if (!currentAccount) {\r\n      return (\r\n        <div className=\"connect-wallet-container\">\r\n          <img\r\n              src=\"https://i.imgur.com/yMocj5x.png\"\r\n              alt=\"Pickachu\"\r\n          />\r\n          <button\r\n            className=\"cta-button connect-wallet-button\"\r\n            onClick={connectWalletAction}\r\n          >\r\n            Connect Wallet to Get Started\r\n          </button>\r\n        </div>\r\n    );\r\n  \t  // シナリオ2.\r\n\t  // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\r\n    } else if (currentAccount && !characterNFT) {\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n    }\r\n  };\r\n  // connectWallet メソッドを実装します。\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert('Get MetaMask!');\r\n        return;\r\n      }\r\n      // ウォレットアドレスに対してアクセスをリクエストしています。\r\n      const accounts = await ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n      // ウォレットアドレスを currentAccount に紐付けます。\r\n      console.log('Connected', accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\r\n  useEffect(() => {\r\n      checkIfWalletIsConnected();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\r\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\r\n          {/* renderContent メソッドを呼び出します。*/}\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}