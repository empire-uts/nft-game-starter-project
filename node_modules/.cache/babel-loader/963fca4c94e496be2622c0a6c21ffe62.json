{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport Arena from './Components/Arena';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // SelectCharacter に入っているファイルをインポートします。\n\nimport SelectCharacter from './Components/SelectCharacter'; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = ',ｷ ﾚ l';\nconst TWITTER_LINK = `https://twitter.com/kii_bmi_N_perm`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ロード状態を初期化します。\n\n  const [isLoading, setIsLoading] = useState(false); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがMetaMaskを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!'); // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    } //すべての関数ロジックの後に、state プロパティを解放します。\n\n\n    setIsLoading(false);\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // アプリがロード中の場合は、LoadingIndicatorをレンダリングします。\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this);\n    } // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n\n\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pickachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 12\n      }, this); // シナリオ3.\n      // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n      // Area でボスと戦います。\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('MetaMask を ダウンロードしてください!');\n        return;\n      } // ユーザーがウォレットを持っているか確認します。\n\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    // ページがロードされたら、即座にロード状態を設定するようにします。\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      } // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\n\n      setIsLoading(false);\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `me → @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WfKwg0DIevkC/Lp/DKpo5wNTmQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["LoadingIndicator","Arena","myEpicGame","ethers","CONTRACT_ADDRESS","transformCharacterData","React","useEffect","useState","SelectCharacter","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import LoadingIndicator from './Components/LoadingIndicator';\r\nimport Arena from './Components/Arena';\r\nimport myEpicGame from './utils/MyEpicGame.json';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\n// SelectCharacter に入っているファイルをインポートします。\r\nimport SelectCharacter from './Components/SelectCharacter';\r\n\r\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\r\nconst TWITTER_HANDLE = ',ｷ ﾚ l';\r\nconst TWITTER_LINK = `https://twitter.com/kii_bmi_N_perm`;\r\n\r\nconst App = () => {\r\n\r\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  // characterNFT と setCharacterNFT を初期化します。\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  // ロード状態を初期化します。\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // ユーザーがRinkeby Network に接続されているか確認します。\r\n  // '4' は Rinkeby のネットワークコードです。\r\n  const checkNetwork = async () => {\r\n\t  try {\r\n\t\t  if (window.ethereum.networkVersion !== '4') {\r\n\t\t  alert(\"Rinkeby Test Network に接続してください!\")\r\n\t\t  } else {\r\n\t\t  console.log(\"Rinkeby に接続されています.\")\r\n\t\t  }\r\n\t  } catch(error) {\r\n\t\t  console.log(error)\r\n\t  }\r\n  }\r\n  \r\n  // ユーザーがMetaMaskを持っているか確認します。\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        console.log('Make sure you have MetaMask!');\r\n\r\n        // 次の行でreturnを使用するため、ここでisLoadingを設定します。\r\n        setIsLoading(false);\r\n        return;\r\n\r\n      } else {\r\n\r\n        console.log('We have the ethereum object', ethereum);\r\n\r\n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\r\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n        // もしアカウントが一つでも存在したら、以下を実行。\r\n        if (accounts.length !== 0) {\r\n\r\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\r\n          const account = accounts[0];\r\n          console.log('Found an authorized account:', account);\r\n\r\n          // currentAccountにユーザーのアカウントアドレスを格納\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log('No authorized account found');\r\n        }\r\n\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    //すべての関数ロジックの後に、state プロパティを解放します。\r\n    setIsLoading(false);\r\n  };\r\n  // レンダリングメソッド\r\n  const renderContent = () => {\r\n    // アプリがロード中の場合は、LoadingIndicatorをレンダリングします。\r\n    if (isLoading) {\r\n\t    return <LoadingIndicator />;\r\n    }\r\n\t  // シナリオ1.\r\n\t  // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\r\n\t  if (!currentAccount) {\r\n\t\t  return (\r\n\t\t  <div className=\"connect-wallet-container\">\r\n\t\t\t  <img\r\n\t\t\t\t  src=\"https://i.imgur.com/yMocj5x.png\"\r\n\t\t\t\t  alt=\"Pickachu\"\r\n\t\t\t  />\r\n\t\t\t  <button\r\n\t\t\t  className=\"cta-button connect-wallet-button\"\r\n\t\t\t  onClick={connectWalletAction}\r\n\t\t\t  >\r\n\t\t\t  Connect Wallet to Get Started\r\n\t\t\t  </button>\r\n\t\t  </div>\r\n\t\t  );\r\n\t  // シナリオ2.\r\n\t  // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\r\n\t  } else if (currentAccount && !characterNFT) {\r\n\t\t  return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n\t  // シナリオ3.\r\n\t  // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\r\n\t  // Area でボスと戦います。\r\n\t  } else if (currentAccount && characterNFT) {\r\n\t\t  return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\r\n\t  }\r\n  };\r\n  // connectWallet メソッドを実装します。\r\n  const connectWalletAction = async () => {\r\n    try {\r\n    const { ethereum } = window;\r\n    if (!ethereum) {\r\n  \t  alert('MetaMask を ダウンロードしてください!');\r\n  \t  return;\r\n    }\r\n\r\n    // ユーザーがウォレットを持っているか確認します。\r\n    checkIfWalletIsConnected();\r\n\r\n    // ウォレットアドレスに対してアクセスをリクエストしています。\r\n    const accounts = await ethereum.request({\r\n  \t  method: 'eth_requestAccounts',\r\n    });\r\n\r\n    // ウォレットアドレスを currentAccount に紐付けます。\r\n    console.log('Connected', accounts[0]);\r\n    setCurrentAccount(accounts[0]);\r\n\r\n    // ユーザーが Rinkeby に接続されているか確認します。\r\n    checkNetwork();\r\n\r\n    } catch (error) {\r\n  \t  console.log(error);\r\n    }\r\n  };\r\n\r\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\r\n  useEffect(() => {\r\n    // ページがロードされたら、即座にロード状態を設定するようにします。\r\n\t  setIsLoading(true);\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\r\n  useEffect(() => {\r\n    // スマートコントラクトを呼び出す関数です。\r\n    const fetchNFTMetadata = async () => {\r\n      console.log('Checking for Character NFT on address:', currentAccount);\r\n\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      const txn = await gameContract.checkIfUserHasNFT();\r\n      if (txn.name) {\r\n        console.log('User has character NFT');\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log('No character NFT found');\r\n      }\r\n      // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\r\n\t    setIsLoading(false);\r\n    };\r\n\r\n    // 接続されたウォレットがある場合のみ、下記を実行します。\r\n    if (currentAccount) {\r\n      console.log('CurrentAccount:', currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\r\n          <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\r\n          {/* renderContent メソッドを呼び出します。*/}\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`me → @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}