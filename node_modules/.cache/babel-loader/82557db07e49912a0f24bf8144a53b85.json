{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\Components\\\\SelectCharacter\\\\index.js\",\n    _s = $RefreshSig$();\n\n// index.js\nimport LoadingIndicator from '../../Components/LoadingIndicator';\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json'; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  //NFT キャラクターのメタデータを保存する状態変数を初期化します。\n  const [characters, setCharacters] = useState([]); // コントラクトのデータを保有する状態変数を初期化します。\n\n  const [gameContract, setGameContract] = useState(null); // Minting の状態保存する状態変数を初期化します。\n\n  const [mintingCharacter, setMintingCharacter] = useState(false); // NFT キャラクターを Mint します。\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n    }\n  }; // ページがロードされた瞬間に下記を実行します。\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // index.js\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint'); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    }; // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`); // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters(); // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      // コンポーネントがマウントされたら、リスナーを停止する。\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"names":["LoadingIndicator","React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","console","log","mintTxn","mintCharacterNFT","wait","error","warn","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["// index.js\r\nimport LoadingIndicator from '../../Components/LoadingIndicator';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\n// SelectCharacter コンポーネントを定義しています。\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    //NFT キャラクターのメタデータを保存する状態変数を初期化します。\r\n    const [characters, setCharacters] = useState([]);\r\n\r\n    // コントラクトのデータを保有する状態変数を初期化します。\r\n    const [gameContract, setGameContract] = useState(null);\r\n\r\n    // Minting の状態保存する状態変数を初期化します。\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n    // NFT キャラクターを Mint します。\r\n    const mintCharacterNFTAction = (characterId) => async () => {\r\n        try {\r\n        if (gameContract) {\r\n            console.log('Minting character in progress...');\r\n            const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n            await mintTxn.wait();\r\n            console.log('mintTxn:', mintTxn);\r\n        }\r\n        } catch (error) {\r\n            console.warn('MintCharacterAction Error:', error);\r\n        }\r\n    };\r\n  \r\n    // ページがロードされた瞬間に下記を実行します。\r\n    useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n  \r\n      // gameContract の状態を更新します。\r\n      setGameContract(gameContract);\r\n  \r\n    } else {\r\n  \r\n      console.log('Ethereum object not found');\r\n  \r\n    }\r\n    }, []);\r\n    \r\n    // index.js\r\n    useEffect(() => {\r\n\r\n        // NFT キャラクターのデータをスマートコントラクトから取得します。\r\n        const getCharacters = async () => {\r\n          try {\r\n            console.log('Getting contract characters to mint');\r\n      \r\n            // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\r\n            const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n      \r\n            console.log('charactersTxn:', charactersTxn);\r\n      \r\n            // すべてのNFTキャラクターのデータを変換します。\r\n            const characters = charactersTxn.map((characterData) =>\r\n              transformCharacterData(characterData)\r\n            );\r\n      \r\n            // ミント可能なすべてのNFTキャラクターの状態を設定します。\r\n            setCharacters(characters);\r\n          } catch (error) {\r\n            console.error('Something went wrong fetching characters:', error);\r\n          }\r\n        };\r\n      \r\n        // イベントを受信したときに起動するコールバックメソッド onCharacterMint を追加します。\r\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n          console.log(\r\n            `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n          );\r\n          // NFT キャラクターが Mint されたら、コントラクトからメタデータを受け取り、アリーナ（ボスとのバトルフィールド）に移動するための状態に設定します。\r\n          if (gameContract) {\r\n            const characterNFT = await gameContract.checkIfUserHasNFT();\r\n            console.log('CharacterNFT: ', characterNFT);\r\n            setCharacterNFT(transformCharacterData(characterNFT));\r\n          }\r\n        };\r\n      \r\n        if (gameContract) {\r\n              getCharacters();\r\n              // リスナーの設定：NFT キャラクターが Mint された通知を受け取ります。\r\n              gameContract.on('CharacterNFTMinted', onCharacterMint);\r\n        }\r\n      \r\n        return () => {\r\n              // コンポーネントがマウントされたら、リスナーを停止する。\r\n      \r\n              if (gameContract) {\r\n                    gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n              }\r\n        };\r\n    }, [gameContract]);\r\n\r\n    // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\r\n    const renderCharacters = () =>\r\n    characters.map((character, index) => (\r\n        <div className=\"character-item\" key={character.name}>\r\n            <div className=\"name-container\">\r\n                <p>{character.name}</p>\r\n            </div>\r\n            <img src={character.imageURI} alt={character.name} />\r\n            <button\r\n                type=\"button\"\r\n                className=\"character-mint-button\"\r\n                onClick={mintCharacterNFTAction(index)}\r\n            >{`Mint ${character.name}`}</button>\r\n        </div>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"select-character-container\">\r\n            <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\r\n            {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">{renderCharacters()}</div>\r\n            )}\r\n        </div>\r\n  );\r\n};\r\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}