{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\Components\\\\Arena\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css'; // フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Arena = _ref => {\n  _s();\n\n  let {\n    characterNFT,\n    setCharacterNFT\n  } = _ref;\n  // コントラクトのデータを保有する状態変数を初期化します。\n  const [gameContract, setGameContract] = useState(null); // ページがロードされると下記が実行されます。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // ボスのメタデータを保存する状態変数を初期化します。\n\n  const [boss, setBoss] = useState(null); // 攻撃の状態を保存する変数を初期化します。\n\n  const [attackState, setAttackState] = useState('');\n\n  const runAttackAction = async () => {\n    try {\n      // コントラクトが呼び出されたことを確認します。\n      if (gameContract) {\n        // attackState の状態を attacking に設定します。\n        setAttackState('attacking');\n        console.log('Attacking boss...'); // NFT キャラクターがボスを攻撃します。\n\n        const attackTxn = await gameContract.attackBoss(); // トランザクションがマイニングされるまで待ちます。\n\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn); // attackState の状態を hit に設定します。\n\n        setAttackState('hit');\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  }; // ページがロードされると下記が実行されます。\n\n\n  useEffect(() => {\n    // ボスのデータをコントラクトから読み込む関数を設定します。\n    const fetchBoss = async () => {\n      //ボスのメタデータをコントラクトをから呼び出します。\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn); // ボスの状態を設定します。\n\n      setBoss(transformCharacterData(bossTxn));\n    }; // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\n\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      // ボスの新しいHPを取得します。\n      const bossHp = newBossHp.toNumber(); // NFT キャラクターの新しいHPを取得します。\n\n      const playerHp = newPlayerHp.toNumber();\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`); // NFT キャラクターとボスのHPを更新します。\n\n      setBoss(prevState => {\n        return { ...prevState,\n          hp: bossHp\n        };\n      });\n      setCharacterNFT(prevState => {\n        return { ...prevState,\n          hp: playerHp\n        };\n      });\n    }; // コントラクトが呼び出されていたら、下記を実行します。\n\n\n    if (gameContract) {\n      fetchBoss(); // リスナーの設定：ボスが攻撃された通知を受け取ります。\n\n      gameContract.on('AttackComplete', onAttackComplete);\n    } // コンポーネントがマウントされたら、リスナーを停止する。\n\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"arena-container\",\n    children: [boss && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boss-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `boss-content ${attackState}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\uD83D\\uDD25 \", boss.name, \" \\uD83D\\uDD25\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: boss.imageURI,\n            alt: `Boss ${boss.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"health-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n              value: boss.hp,\n              max: boss.maxHp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${boss.hp} / ${boss.maxHp} HP`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attack-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button\",\n          onClick: runAttackAction,\n          children: `💥 Attack ${boss.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u8868\\u793A\\u3057\\u307E\\u3059\\u3002\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Arena, \"8iDnGr15j6m/a5wbIUrFP6WlaVE=\");\n\n_c = Arena;\nexport default Arena;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arena\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/Components/Arena/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","Arena","characterNFT","setCharacterNFT","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","boss","setBoss","attackState","setAttackState","runAttackAction","attackTxn","attackBoss","wait","error","fetchBoss","bossTxn","getBigBoss","onAttackComplete","newBossHp","newPlayerHp","bossHp","toNumber","playerHp","prevState","hp","on","off","name","imageURI","maxHp"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport './Arena.css';\r\n// フロントエンドにNFTキャラクターを表示するため、characterNFTのメタデータを渡します。\r\n// NFT キャラクターの情報を更新するため、setCharacterNFT を引数として追加します。\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // コントラクトのデータを保有する状態変数を初期化します。\r\n  const [gameContract, setGameContract] = useState(null);\r\n  // ページがロードされると下記が実行されます。\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n  }, []);\r\n  // ボスのメタデータを保存する状態変数を初期化します。\r\n  const [boss, setBoss] = useState(null);\r\n  // 攻撃の状態を保存する変数を初期化します。\r\n  const [attackState, setAttackState] = useState('');\r\n  const runAttackAction = async () => {\r\n    try {\r\n      // コントラクトが呼び出されたことを確認します。\r\n      if (gameContract) {\r\n        // attackState の状態を attacking に設定します。\r\n        setAttackState('attacking');\r\n        console.log('Attacking boss...');\r\n  \r\n        // NFT キャラクターがボスを攻撃します。\r\n        const attackTxn = await gameContract.attackBoss();\r\n  \r\n        // トランザクションがマイニングされるまで待ちます。\r\n        await attackTxn.wait();\r\n        console.log('attackTxn:', attackTxn);\r\n  \r\n        // attackState の状態を hit に設定します。\r\n        setAttackState('hit');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error attacking boss:', error);\r\n      setAttackState('');\r\n    }\r\n  };\r\n\r\n  // ページがロードされると下記が実行されます。\r\n    useEffect(() => {\r\n\t    // ボスのデータをコントラクトから読み込む関数を設定します。\r\n\t    const fetchBoss = async () => {\r\n\t\t    //ボスのメタデータをコントラクトをから呼び出します。\r\n\t\t    const bossTxn = await gameContract.getBigBoss();\r\n\t\t    console.log('Boss:', bossTxn);\r\n\t\t    // ボスの状態を設定します。\r\n\t\t    setBoss(transformCharacterData(bossTxn));\r\n\t    };\r\n\r\n\t    // AttackCompleteイベントを受信したときに起動するコールバックメソッドを追加します。\r\n\t    const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n\t\t    // ボスの新しいHPを取得します。\r\n\t\t    const bossHp = newBossHp.toNumber();\r\n\t\t    // NFT キャラクターの新しいHPを取得します。\r\n\t\t    const playerHp = newPlayerHp.toNumber();\r\n\t\t    console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n\t\t    // NFT キャラクターとボスのHPを更新します。\r\n\t\t    setBoss((prevState) => {\r\n\t\t\t    return { ...prevState, hp: bossHp };\r\n\t\t    });\r\n\t\t    setCharacterNFT((prevState) => {\r\n\t\t\t    return { ...prevState, hp: playerHp };\r\n\t    \t});\r\n\t    };\r\n\r\n\t    // コントラクトが呼び出されていたら、下記を実行します。\r\n\t    if (gameContract) {\r\n\t\t    fetchBoss();\r\n\t\t    // リスナーの設定：ボスが攻撃された通知を受け取ります。\r\n\t\t    gameContract.on('AttackComplete', onAttackComplete);\r\n\t    }\r\n\r\n\t    // コンポーネントがマウントされたら、リスナーを停止する。\r\n\t    return () => {\r\n\t\t    if (gameContract) {\r\n\t\t\t    gameContract.off('AttackComplete', onAttackComplete);\r\n\t\t    }\r\n\t    }\r\n    }, [gameContract]);\r\n\r\n  return (\r\n    <div className=\"arena-container\">\r\n      {/* ボスをレンダリングします */}\r\n      {boss && (\r\n        <div className=\"boss-container\">\r\n          {/* attackState 追加します */}\r\n          <div className={`boss-content ${attackState}`}>\r\n            <h2>🔥 {boss.name} 🔥</h2>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n              <div className=\"health-bar\">\r\n                <progress value={boss.hp} max={boss.maxHp} />\r\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"attack-container\">\r\n            <button className=\"cta-button\" onClick={runAttackAction}>\r\n              {`💥 Attack ${boss.name}`}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* NFT キャラクター */}\r\n      <p>NFT キャラクターを表示します。</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Arena;"]},"metadata":{},"sourceType":"module"}