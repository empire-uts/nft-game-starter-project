{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\81905\\\\ETH-NFT-game\\\\nft-game-starter-project\\\\src\\\\Components\\\\SelectCharacter\\\\index.js\",\n    _s = $RefreshSig$();\n\n// index.js\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json'; // SelectCharacter コンポーネントを定義しています。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null); // ページがロードされた瞬間に下記を実行します。\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer); // gameContract の状態を更新します。\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // index.js\n\n  useEffect(() => {\n    // NFT キャラクターのデータをスマートコントラクトから取得します。\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint'); // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn); // すべてのNFTキャラクターのデータを変換します。\n\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData)); // ミント可能なすべてのNFTキャラクターの状態を設定します。\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    }; // gameContractの準備ができたら、NFT キャラクターを読み込みます。\n\n\n    if (gameContract) {\n      getCharacters();\n    }\n  }, [gameContract]); // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\" //onClick={mintCharacterNFTAction(index)}\n      ,\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u23EC \\u4E00\\u7DD2\\u306B\\u6226\\u3046 NFT \\u30AD\\u30E3\\u30E9\\u30AF\\u30BF\\u30FC\\u3092\\u9078\\u629E \\u23EC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectCharacter, \"ReBpEb1ZDzzSsIn8oOlkhmevdME=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["C:/Users/81905/ETH-NFT-game/nft-game-starter-project/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","getCharacters","charactersTxn","getAllDefaultCharacters","map","characterData","error","renderCharacters","character","index","name","imageURI","length"],"mappings":"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","sourcesContent":["// index.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\n// SelectCharacter コンポーネントを定義しています。\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n  \r\n    // ページがロードされた瞬間に下記を実行します。\r\n    useEffect(() => {\r\n    const { ethereum } = window;\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n  \r\n      // gameContract の状態を更新します。\r\n      setGameContract(gameContract);\r\n  \r\n    } else {\r\n  \r\n      console.log('Ethereum object not found');\r\n  \r\n    }\r\n    }, []);\r\n    \r\n    // index.js\r\n    useEffect(() => {\r\n        // NFT キャラクターのデータをスマートコントラクトから取得します。\r\n        const getCharacters = async () => {\r\n        try {\r\n            console.log('Getting contract characters to mint');\r\n            // ミント可能な全 NFT キャラクター をコントラクトをから呼び出します。\r\n            const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n  \r\n            console.log('charactersTxn:', charactersTxn);\r\n  \r\n        // すべてのNFTキャラクターのデータを変換します。\r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        // ミント可能なすべてのNFTキャラクターの状態を設定します。\r\n        setCharacters(characters);\r\n  \r\n        } catch (error) {\r\n            console.error('Something went wrong fetching characters:', error);\r\n        }\r\n        };\r\n    // gameContractの準備ができたら、NFT キャラクターを読み込みます。\r\n        if (gameContract) {\r\n        getCharacters();\r\n        }\r\n    }, [gameContract]);\r\n\r\n    // NFT キャラクターをフロントエンドにレンダリングするメソッドです。\r\n    const renderCharacters = () =>\r\n    characters.map((character, index) => (\r\n        <div className=\"character-item\" key={character.name}>\r\n            <div className=\"name-container\">\r\n                <p>{character.name}</p>\r\n            </div>\r\n            <img src={character.imageURI} alt={character.name} />\r\n            <button\r\n                type=\"button\"\r\n                className=\"character-mint-button\"\r\n                //onClick={mintCharacterNFTAction(index)}\r\n            >{`Mint ${character.name}`}</button>\r\n        </div>\r\n));\r\n\r\n    return (\r\n        <div className=\"select-character-container\">\r\n            <h2>⏬ 一緒に戦う NFT キャラクターを選択 ⏬</h2>\r\n            {/* キャラクターNFTがフロントエンド上で読み込めている際に、下記を表示します*/}\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">{renderCharacters()}</div>\r\n            )}\r\n        </div>\r\n  );\r\n};\r\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}